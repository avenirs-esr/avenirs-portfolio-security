name: "Setup PostgreSQL"
description: "Initializes PostgreSQL environment"

runs:
  using: "composite"
  steps:
    - name: Cache Docker Images for PostgreSQL
      uses: actions/cache@v4
      with:
        path: /tmp/.docker-cache-postgres
        key: docker-postgres-cache
        restore-keys: |
          docker-postgres-

    - name: Ensure Cache Directory Exists
      run: |
        mkdir -p /tmp/.docker-cache-postgres
        echo "Cache directory ensured: /tmp/.docker-cache-postgres"
      shell: bash

    - name: Load PostgreSQL Image from Cache
      run: |
        if [ -f /tmp/.docker-cache-postgres/postgres.tar ]; then
          echo "Loading PostgreSQL image from cache..."
          docker load -i /tmp/.docker-cache-postgres/postgres.tar
          echo "PostgreSQL image loaded from cache."
        else
          echo "No cached PostgreSQL image found."
        fi
      shell: bash

    - name: Check for Updates or Missing PostgreSQL Image
      run: |
        LOCAL_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' postgres:latest 2>/dev/null || echo "none")
        REMOTE_DIGEST=$(docker manifest inspect postgres:latest | jq -r '.manifests[0].digest' 2>/dev/null || echo "none")
        echo "Local Digest: $LOCAL_DIGEST"
        echo "Remote Digest: $REMOTE_DIGEST"
        if [ "$LOCAL_DIGEST" != "$REMOTE_DIGEST" ] || [ "$LOCAL_DIGEST" == "none" ]; then
          echo "Pulling updated PostgreSQL Docker image..."
          docker pull postgres:latest
          docker save postgres:latest -o /tmp/.docker-cache-postgres/postgres.tar
          echo "PostgreSQL image pulled and saved to cache."
        else
          echo "PostgreSQL image is up-to-date and loaded from cache."
        fi
      shell: bash

    - name: Start PostgreSQL Container
      run: |
        echo "Starting PostgreSQL Docker container..."
        docker run -d --name avenirs-postgres \
          --network avenirs-network \
          -e POSTGRES_USER=$POSTGRES_USER \
          -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
          -e POSTGRES_DB=$POSTGRES_DB \
          -p 65432:5432 \
          postgres:latest
      shell: bash

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..4}; do
          if docker exec avenirs-postgres pg_isready -U $POSTGRES_USER -h localhost -p 5432; then
            echo "PostgreSQL is ready."
            break
          fi
          echo "PostgreSQL is not ready yet... retrying in 5 seconds."
          sleep 5
        done
      shell: bash

    - name: Copy SQL Files to Container
      run: |
        docker cp src/main/resources/db/init-db.sql avenirs-postgres:/tmp/init-db.sql
        docker cp src/test/resources/db/init-test-db.sql avenirs-postgres:/tmp/init-test-db.sql
      shell: bash

    - name: Copy Jar dependency to Container
      run: |
        JASYPT_JAR=".github/lib/jasypt-1.9.3.jar"
        [ -f "$JASYPT_JAR" ] || { echo -ne "\n\nError : JAR Jasypt not found in .github/lib\n\n"; exit 1; }

        docker cp $JASYPT_JAR avenirs-postgres:/tmp/jasypt.jar
      shell: bash


    - name: Initialize Database
      run: |
        docker exec -i avenirs-postgres bash -c "\
        encrypted=\$(grep -o 'ENC([A-Za-z0-9+/=]*)' /tmp/init-db.sql | sed -E 's/ENC\\((.*)\\)/\\1/'); \
        decrypted=\$(java -cp /tmp/jasypt.jar org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI input=\$encrypted password=$JASYPT_ENCRYPTOR_PASSWORD algorithm=PBEWithMD5AndDES | grep -v '^$' | tail -n 1); \
        sed \"s|ENC(\$encrypted)|\$decrypted|\" /tmp/init-db.sql | psql -U $POSTGRES_USER -d $POSTGRES_DB; \
        encrypted=\$(grep -o 'ENC([A-Za-z0-9+/=]*)' /tmp/init-test-db.sql | sed -E 's/ENC\\((.*)\\)/\\1/'); \
        decrypted=\$(java -cp /tmp/jasypt.jar org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI input=\$encrypted password=$JASYPT_ENCRYPTOR_PASSWORD algorithm=PBEWithMD5AndDES | grep -v '^$' | tail -n 1); \
        sed \"s|ENC(\$encrypted)|\$decrypted|\" /tmp/init-test-db.sql | psql -U $POSTGRES_USER -d $POSTGRES_DB;"
      shell: bash
      env:
        JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
