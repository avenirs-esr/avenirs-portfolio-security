name: "Setup Postgresql"
description: "Initializes Postgresql environment"
inputs:
  jasypt_password:
    description: "Jasypt encryption password"
    required: true
  postgres_db:
    description: "Postgres database"
    required: true
  postgres_user:
    description: "Postgres user"
    required: true
  postgres_password:
    description: "Postgres user password"
    required: true
  cache_dir:
    description: "Path to the cache directory"
    required: false
    default: "/tmp/.cache-postgres"
runs:
  using: "composite"

  steps:
    - name: Ensure Cache Directory Exists
      run: |
        cache_dir=${{inputs.cache_dir}}
        [ -e $cache_dir ] && echo "Cache directory found: $cache_dir" || { mkdir -p $cache_dir; echo "Cache directory created: $cache_dir"; }
        echo "Cache directory ensured: $cache_dir"
      shell: bash

    - name: Cache Docker Images for Postgresql
      uses: actions/cache@v4
      with:
        path: ${{inputs.cache_dir}}
        key: postgres-cache-${{ runner.os }}-${{ hashFiles('${{inputs.cache_dir}}/digest', '${{inputs.cache_dir}}/postgres.tar') }}
        restore-keys: |
          postgres-cache-${{ runner.os }}-
          postgres-cache-

    - name: Check Cache Restoration
      run: |
        echo "Checking restored cache:"
        ls -la ${{inputs.cache_dir}}
      shell: bash

    - name: Debug Cache Before Save
      run: |
        echo "Contents of cache directory before save:"
        ls -la ${{inputs.cache_dir}}
        echo "Hash of files:"
        if [ -n "$(ls -A ${{inputs.cache_dir}} 2>/dev/null)" ]; then
          echo "Hash of files:"
          sha256sum ${{inputs.cache_dir}}/*
        else
          echo "No files to hash."
        fi
      shell: bash

    - name: Check for Updates or Missing Postgresql Image
      id: CheckForUpdates
      run: |
        LOCAL_DIGEST=$(cat ${{inputs.cache_dir}}/digest 2>/dev/null || echo "none")
        REMOTE_DIGEST=$(docker manifest inspect postgres:latest | jq -r '.manifests[0].digest' 2>/dev/null || echo "none")
        echo "Local Digest: $LOCAL_DIGEST"
        echo "Remote Digest: $REMOTE_DIGEST"
        if [ "$LOCAL_DIGEST" != "$REMOTE_DIGEST" ] || [ "$LOCAL_DIGEST" == "none" ]; then
          echo "Pulling updated Postgresql Docker image..."
          docker pull postgres:latest
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' postgres:latest | awk -F '@' '{print $2}')
          echo "$DIGEST" > ${{inputs.cache_dir}}/digest
          docker save postgres:latest -o ${{inputs.cache_dir}}/postgres.tar
          echo "Postgresql image pulled and saved to cache."
          echo "::set-output name=cache-updated::true"
        else
          echo "Postgresql image is up-to-date and loaded from cache."
          echo "::set-output name=cache-updated::false"
        fi
      shell: bash


    - name: Debug Cache Before Save
      run: |
        echo "Contents of cache directory before save:"
        ls -la ${{inputs.cache_dir}}
        echo "Hash of files:"
        if [ -n "$(ls -A ${{inputs.cache_dir}} 2>/dev/null)" ]; then
          echo "Hash of files:"
          sha256sum ${{inputs.cache_dir}}/*
        else
          echo "No files to hash."
        fi
      shell: bash

    - name: Save Cache After Update
      if: steps.CheckForUpdates.outputs.cache-updated == 'true'
      uses: actions/cache@v4
      with:
        path: ${{inputs.cache_dir}}
        key: postgres-cache-${{ runner.os }}-${{ hashFiles('${{inputs.cache_dir}}/digest', '${{inputs.cache_dir}}/postgres.tar') }}

    - name: Verify Cache After Save
      run: |
        echo "Verifying cache after save:"
        ls -la ${{inputs.cache_dir}}
        cat ${{inputs.cache_dir}}/digest || echo "No digest found in cache"
      shell: bash
